/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019
              Vladimír Vondruš <mosra@centrum.cz>
    Copyright © 2018 Jonathan Hale <squareys@googlemail.com>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page building-integration Downloading and building integration libraries
@brief Guide how to download and build integration libraries for the Magnum engine.

@tableofcontents
@m_footernavigation

The integration repository provides integration of various math and physics
libraries with Magnum engine. They are not needed for essential usage, but it
might get handy if you want to use something other than builtin components and
seamlessly integrate them with the rest of the engine.

@section building-integration-packages Prepared packages

The easiest way to install Magnum Integration is to use one of the ready-made
packages for your platform of choice. See @ref building-integration-manual if
you want to have more control. Cross-compiling is very similar to
@ref building-cross "cross-compiling of Magnum itself".

-   @ref building-integration-packages-vcpkg
-   @ref building-integration-packages-arch
-   @ref building-integration-packages-msys
-   @ref building-integration-packages-deb
-   @ref building-integration-packages-gentoo
-   @ref building-integration-packages-brew

@subsection building-integration-packages-vcpkg Vcpkg packages on Windows

Magnum Integration libraries are available as a [Vcpkg](https://github.com/Microsoft/vcpkg)
package. See @ref building-packages-vcpkg "the Magnum Vcpkg documentation" for
a more detailed introduction and a troubleshooting guide. Installing latest
stable version of Magnum Integration with all its dependencies is done like
this:

@code{.bat}
vcpkg install magnum-integration
@endcode

But often you may want to install the latest Git revision of all Magnum
projects instead:

@code{.bat}
vcpkg install --head corrade magnum magnum-integration
@endcode

Note that just a subset of integration libraries is installed by default. To
opt-in or opt-out of additional features, you can use the following syntax;
feature names are simply names of CMake `WITH_*` options from the
@ref building-integration-features section but lowercase, e.g.:

@code{.bat}
vcpkg install magnum-integration[bullet]
@endcode

To install all features of a package, use `*`, e.g.:

@code{.bat}
vcpkg install magnum-integration[*]
@endcode

There are also Vcpkg packages for
@ref building-plugins-packages-vcpkg "Magnum Plugins" and
@ref building-extras-packages-vcpkg "Magnum Extras".

@subsection building-integration-packages-arch ArchLinux packages

In `package/archlinux/magnum-integration-git` there is a package for Git
development build. The package is also in AUR as
[magnum-integration-git](https://aur.archlinux.org/packages/magnum-integration-git/).
It depends on @ref building-corrade-packages-arch "Corrade" and
@ref building-packages-arch "Magnum" ArchLinux packages.

There are also a few development packages for native builds, cross-compilation
for Emscripten, Android and MinGW or various sanitizer/coverage builds. See the
PKGBUILD files in the `package/archlinux` directory. They allow you to build
and install the package directly from source tree. Example usage:

@code{.sh}
git clone git://github.com/mosra/magnum-integration && cd magnum-integration
cd package/archlinux
makepkg -fp PKGBUILD # or any other PKGBUILD file
@endcode

@note The PKGBUILDs reference a few external dependencies such as `imgui-src`
    or (in case of Emscripten) `emscripten-bullet`, which are not in AUR. You
    can find PKGBUILDs for these in https://github.com/mosra/archlinux. You can
    also edit the package, disable building of affected features and remove the
    dependency.

In most cases the development PKGBUILDs also contain a @cb{.sh} check() @ce
function which will run all unit tests before packaging. That might sometimes
fail or take too long, pass `--nocheck` to `makepkg` to skip that.

Once built, install the package using `pacman`:

@code{.sh}
sudo pacman -U magnum-integration-*.pkg.tar.xz
@endcode

Edit the PKGBUILDs if you want to pass additional flags to CMake or
@ref building-integration-features "enable / disable additional features".

There are also ArchLinux packages for
@ref building-plugins-packages-arch "Magnum Plugins",
@ref building-extras-packages-arch "Magnum Extras" and
@ref building-examples-packages-arch "Magnum Examples".

@subsection building-integration-packages-msys MSYS2 packages

[MSYS2](https://www.msys2.org/) package for the latest stable release is
mantained in the official repos. Installing is as simple as this:

@code{.sh}
pacman -S mingw-w64-x86_64-magnum-integration
                                    # or mingw-w64-i686-magnum-integration
@endcode

Similarly to ArchLinux, there is one package in the
`package/msys/magnum-integration` directory, which will download and package
latest stable release; and then a development `PKGBUILD` in `package/msys`,
allowing you to package and install the currently checked out source tree. Both
depend on corresponding @ref building-corrade-packages-msys "Corrade" and
@ref building-packages-msys "Magnum" MSYS2 packages. Example usage:

@code{.sh}
git clone git://github.com/mosra/magnum-integration && cd magnum-integration
cd package/msys
makepkg -fp PKGBUILD
@endcode

The above works in a 32/64bit MinGW shell, from a MSYS shell the equivalent
command is

@code{.sh}
makepkg-mingw -fp PKGBUILD
@endcode

@m_class{m-noindent}

which will build both a 32bit and a 64bit version. See the
[MSYS2 Wiki](https://github.com/msys2/msys2/wiki/Creating-Packages) for more
information.

There are also MSYS2 packages for
@ref building-plugins-packages-msys "Magnum Plugins".

@subsection building-integration-packages-deb Packages for Debian, Ubuntu and derivatives

Prebuilt packages of the latest stable version for Ubuntu 14.04, 16.04 and
18.04 are available through a PPA. To install packages related to Magnum and
Corrade, you can add the repository and then install the packages with the
following commands:

@code{.sh}
sudo add-apt-repository ppa:chrome/magnum.graphics
sudo apt-get update
sudo apt-get install magnum-integration magnum-integration-dev
@endcode

For more information about these packages, please visit
[the PPA page](https://launchpad.net/~chrome/+archive/ubuntu/magnum.graphics).

To build your own package, the `package/debian/` directory contains all files
needed for building Debian packages. You need the
@ref building-corrade-packages-deb "Corrade" and
@ref building-packages-deb "Magnum" Debian packages installed and in addition
also the `dpkg-dev` and `debhelper` packages. Building is easy, just change
directory to package root, link or copy the `package/debian` directory there
and run `dpkg-buildpackage`:

@code{.sh}
git clone git://github.com/mosra/magnum-integration && cd magnum-integration
ln -s package/debian .
dpkg-buildpackage
@endcode

This will compile binary and development packages, which will then appear in
parent directory. Install them using `dpkg`:

@code{.sh}
sudo dpkg -i ../magnum-integration*.deb
@endcode

If you want to pass additional flags to CMake or
@ref building-integration-features "enable / disable additional features", add
them to `dh_auto_configure` at the bottom of `debian/rules`. Watch out, as
indentation has to be done using tabs, not spaces.

There are also Debian packages for
@ref building-plugins-packages-deb "Magnum Plugins",
@ref building-extras-packages-deb "Magnum Extras" and
@ref building-examples-packages-deb "Magnum Examples".

@subsection building-integration-packages-gentoo Gentoo Linux ebuilds

Gentoo Git ebuild is available in the `package/gentoo` directory. Get the
@ref building-corrade-packages-gentoo "Corrade" and
@ref building-packages-gentoo "Magnum" Gentoo packages first and then build and
install Magnum Integration like this:

@code{.sh}
git clone git://github.com/mosra/magnum-integration && cd magnum-integration
cd package/gentoo
sudo ebuild dev-libs/magnum-integration/magnum-integration-99999.ebuild manifest clean merge
@endcode

If you want to pass additional flags to CMake or
@ref building-integration-features "enable / disable additional features", add
them to `mycmakeargs` in the `*.ebuild` file.

There are also Gentoo packages for
@ref building-plugins-packages-gentoo "Magnum Plugins",
@ref building-extras-packages-gentoo "Magnum Extras" and
@ref building-examples-packages-gentoo "Magnum Examples".

@subsection building-integration-packages-brew Homebrew formulas for macOS

macOS [Homebrew](https://brew.sh) formulas building the latest Git revision are
in the `package/homebrew` directory. Either use the `*.rb` files directly or
use the tap at https://github.com/mosra/homebrew-magnum. This will install the
latest stable version of Magnum Integration with all dependencies:

@code{.sh}
brew install mosra/magnum/magnum-integration
@endcode

But often you may want to install the latest Git revision of all Magnum
projects instead:

@code{.sh}
brew install --HEAD mosra/magnum/corrade
brew install --HEAD mosra/magnum/magnum
brew install --HEAD mosra/magnum/magnum-integration
@endcode

When installing from the `*.rb` files you need to install the
@ref building-corrade-packages-brew "Corrade"
and @ref building-packages-brew "Magnum" Homebrew packages first. If you want
to pass additional flags to CMake or
@ref building-integration-features "enable / disable additional features", edit
the `*.rb` file.

There are also Homebrew packages for
@ref building-plugins-packages-brew "Magnum Plugins",
@ref building-extras-packages-brew "Magnum Extras" and
@ref building-examples-packages-brew "Magnum Examples".

@section building-integration-manual Manual build

The source is available on GitHub: https://github.com/mosra/magnum-integration.
Building the integration libraries is very similar to building Magnum itself.
See @ref building for additonal information about building and running tests,
cross-compiling and platform-specific issues.

@subsection building-integration-features Enabling or disabling features

Similarly to Magnum, the libraries are build as shared by default. If you are
developing for a platform which doesn't support shared libraries or if you just
want to link them statically, enable `BUILD_STATIC` to build the libraries as
static. If you plan to use them with shared libraries later, enable also
position-independent code with `BUILD_STATIC_PIC`.

Libraries built in the `Debug` configuration (e.g. with `CMAKE_BUILD_TYPE` set
to `Debug`) have a `-d` suffix, similarly to what is done when
@ref building "building Magnum itself".

By default no integration libraries are built and you need to select them
manually:

-   `WITH_BULLET` --- Build the @ref BulletIntegration "BulletIntegration"
    library. Depends on [Bullet Physics](http://bulletphysics.org/).
-   `WITH_DART` --- Build the @ref DartIntegration "DartIntegration" library.
    Depends on [DART](http://dartsim.github.io/).
-   `WITH_EIGEN` --- Build the @ref EigenIntegration "EigenIntegration"
    library. Depends on [Eigen](http://eigen.tuxfamily.org/).
-   `WITH_GLM` --- Build the @ref GlmIntegration "GlmIntegration" library.
    Depends on [GLM](https://glm.g-truc.net/).
-   `WITH_IMGUI` --- Build the @ref ImGuiIntegration "ImGuiIntegration" library.
    Depends on [Dear ImGui](https://github.com/ocornut/imgui) --- if you are on
    Vcpkg, it will "just work", otherwise you need to download the sources and
    point `IMGUI_DIR` to their directory so CMake can find them.
-   `WITH_OVR` --- Build the @ref OvrIntegration "OvrIntegration" library.
    Depends on the [Oculus SDK](http://developer.oculus.com/).

Note that each [*Integration namespace](namespaces.html) documentation contains
more detailed information about its dependencies, availability on particular
platforms and also a guide how to enable given library for building and hot to
use it with CMake.

@section building-integration-doc Building documentation

The documentation for integration libraries is built as part of of the main
Magnum documentation. Clone the projects next to each other and continue as
described in @ref building-doc.

@section building-integration-ci Continuous Integration

@subsection building-integration-ci-travis Travis

In `package/ci/` there is a `travis.yml` file with Linux GCC 4.8, macOS, Linux
desktop GLES2/GLES3, iOS GLES2/GLES3, Emscripten WebGL1/WebGL2, Android
GLES2/GLES3, AddressSanitizer and ThreadSanitizer configuration. Online at
https://travis-ci.org/mosra/magnum-integration.

@subsection building-integration-ci-appveyor AppVeyor

In `package/ci/` there is an `appveyor.yml` file with Windows desktop MSVC,
MinGW, Windows desktop GLES2/GLES3 and Windows RT GLES2/GLES3 configuration.
Online at https://ci.appveyor.com/project/mosra/magnum-integration.

@subsection building-integration-ci-coverage Codecov.io

Linux, Linux GLES, macOS and Windows MinGW builds contribute to a combined code
coverage report, available online at
https://codecov.io/gh/mosra/magnum-integration.
*/
}
